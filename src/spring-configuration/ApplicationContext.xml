<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:jpa="http://www.springframework.org/schema/data/jpa"
  xmlns:mvc="http://www.springframework.org/schema/mvc"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:util="http://www.springframework.org/schema/util"
  xsi:schemaLocation=" 
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
    http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd">  
      
        <description>Spring公共配置 </description>  
      <!-- 
        使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入  
        <context:component-scan base-package="com.wedding">  
            <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>  
        </context:component-scan>  
      
        JPA实体管理工厂的配置  
        <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">   
            <property name="dataSource" ref="dataSource"/>  
            <property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter"/>  
            <property name="packagesToScan"   value="com.wedding"/>待扫描的实体类包，不再需要persistence.xml了  
            <property name="jpaProperties">  
                <props>  
                    <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>  
                    <prop key="hibernate.show_sql">true</prop>  
                    <prop key="hibernate.hbm2ddl.auto">update</prop>  
                </props>  
            </property>  
        </bean>  
          
        指定实现JPA的适配器  
        <bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">  
            <property name="databasePlatform" value="org.hibernate.dialect.MySQLDialect" />  
        </bean>  
          
        Jpa 事务配置  
        <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">  
            <property name="entityManagerFactory" ref="entityManagerFactory"/>  
        </bean>  
          
        Spring Data Jpa配置  
        
        <jpa:repositories base-package="com.wedding"  transaction-manager-ref="transactionManager" entity-manager-factory-ref="entityManagerFactory"/>  
        
        使用annotation定义事务  
        <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />  
      
        JSR303 Validator定义  
        <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />  
          
        production环境  
        <beans profile="production">  
            <context:property-placeholder ignore-unresolvable="true" location="classpath*:/db.properties" />    
              
            数据源配置, 使用DBCP数据库连接池  
            <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">  
                Connection Info  
                <property name="driverClassName" value="${jdbc.driver}" />  
                <property name="url" value="${jdbc.url}" />  
                <property name="username" value="${jdbc.username}" />  
                <property name="password" value="${jdbc.password}" />  
              
                Connection Pooling Info  
                <property name="maxActive" value="${dbcp.maxActive}" />  
                <property name="maxIdle" value="${dbcp.maxIdle}" />  
                <property name="defaultAutoCommit" value="false" />  
                连接Idle一个小时后超时  
                <property name="timeBetweenEvictionRunsMillis" value="3600000" />  
                <property name="minEvictableIdleTimeMillis" value="3600000" />  
            </bean>   -->
            <!-- 数据源配置,使用应用服务器的数据库连接池 -->  
            <!--<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/ExampleDB" />/beans>  -->  
        
          
        <!-- local development环境 -->  
      <!--   <beans profile="development">  
            <context:property-placeholder ignore-resource-not-found="true"  
                location="classpath*:/db.properties,  
                          classpath*:/db_dev.properties" />    
      
            DBCP连接池  
            <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">  
                <property name="driverClassName" value="${jdbc.driver}" />  
                <property name="url" value="${jdbc.url}" />  
                <property name="username" value="${jdbc.username}" />  
                <property name="password" value="${jdbc.password}" />  
                <property name="defaultAutoCommit" value="false" />  
            </bean>  
        </beans>  
 -->          
        <!-- unit test环境  
        <beans profile="test">  
            <context:property-placeholder ignore-resource-not-found="true"  
                location="classpath*:/db_test.properties" />   
              --> 
            <!-- Simple连接池 
            <bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">  
                <property name="driverClass" value="${jdbc.driver}" />  
                <property name="url" value="${jdbc.url}" />  
                <property name="username" value="${jdbc.username}" />  
                <property name="password" value="${jdbc.password}" />  
            </bean>  -->  
      
            <!-- 初始化数据表结构 与默认数据
            <jdbc:initialize-database data-source="dataSource" ignore-failures="ALL">  
                <jdbc:script location="classpath:sql/h2/schema.sql" />  
                <jdbc:script location="classpath:data/import-data.sql" encoding="UTF-8"/>  
            </jdbc:initialize-database> </beans>   -->  
        
        
        
        
 <!-- <context:annotation-config />  
 <context:component-scan base-package="com.wedding" />  自动扫描所有注解该路径  
  
 <context:property-placeholder location="classpath:/db.properties" />  
  
 <bean id="sessionFactory"  
  class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">  
  <property name="dataSource" ref="dataSource" />  
  <property name="hibernateProperties">  
   <props>  
    <prop key="hibernate.dialect">${dataSource.dialect}</prop>  
    <prop key="hibernate.hbm2ddl.auto">${dataSource.hbm2ddl.auto}</prop>  
    <prop key="hibernate.hbm2ddl.auto">update</prop>  
   </props>  
  </property>  
  <property name="packagesToScan">  
   <list>  
    <value>com.wedding</value>扫描实体类，也就是平时所说的model  
   </list>  
    </property>  
 </bean>  
  
 <bean id="transactionManager"  
  class="org.springframework.orm.hibernate3.HibernateTransactionManager">  
  <property name="sessionFactory" ref="sessionFactory" />  
  <property name="dataSource" ref="dataSource" />  
 </bean>  
  
 <bean id="dataSource"  
  class="org.springframework.jdbc.datasource.DriverManagerDataSource">  
  <property name="driverClassName" value="${dataSource.driverClassName}" />  
  <property name="url" value="${dataSource.url}" />  
  <property name="username" value="${dataSource.username}" />  
  <property name="password" value="${dataSource.password}" />  
 </bean>  
 Dao的实现  
 <bean id="entityDao" class="com.wedding.service.EntityDaoImpl">    
  <property name="sessionFactory" ref="sessionFactory" />  
 </bean>  
 <tx:annotation-driven transaction-manager="transactionManager" />  
 <tx:annotation-driven mode="aspectj"/>  
    
    <aop:aspectj-autoproxy/>    
   -->
  
    
  
<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入  !-->
        <context:component-scan base-package="com.yc">  
            <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>  
        </context:component-scan>  

    <!-- Jpa Entity Manager 配置 -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter"/>
        <property name="packagesToScan" >
        	<array>
        		<value>com.yc</value>
        	</array>
        </property>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
                <prop key="hibernate.cache.provider_class">org.hibernate.cache.NoCacheProvider</prop>
                <prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.format_sql">false</prop>
            </props>
        </property>
    </bean>

    <bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>

    <!-- Spring Data Jpa配置 -->
    <jpa:repositories base-package="com.yc"  transaction-manager-ref="transactionManager" entity-manager-factory-ref="entityManagerFactory"/>
	
    <!-- Jpa 事务配置 -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />


    <!-- 数据源配置,使用应用内的DBCP数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!--property name="driverClassName" value="${db.driverClass}"/-->
        <property name="url" value="${db.jdbcUrl}" />
        <property name="username" value="${db.user}" />
        <property name="password" value="${db.password}" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${db.initialSize}" />
        <property name="minIdle" value="${db.minIdle}" />
        <property name="maxActive" value="${db.maxActive}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${db.maxWait}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${db.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}" />

        <property name="validationQuery" value="SELECT 'x' from dual" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${db.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${db.maxPoolPreparedStatementPerConnectionSize}" />
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat,log4j" />
        <property name="proxyFilters">
            <list>
                <ref bean="log-filter"/>
            </list>
        </property>
    </bean>
    
    
    <!-- 启动对@AspectJ注解的支持 --> 
    <aop:aspectj-autoproxy />


    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
        <property name="resultSetLogEnabled" value="false" />
        <property name="statementExecutableSqlLogEnable" value="true" />
    </bean>

    <bean id="transactionAwareDataSourceProxy" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
        <constructor-arg ref="dataSource"/>
    </bean>

    <bean id="dbHelper" class="com.cplatform.dbhelp.DbHelper">
        <constructor-arg ref="transactionAwareDataSourceProxy"/>
    </bean>
    
    </beans>  